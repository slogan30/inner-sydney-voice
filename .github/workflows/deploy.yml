name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    # Build frontend locally
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'

    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
      env:
        VITE_API_URL: https://innersydneyvoice.app/api
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

    # Deploy to EC2
    - name: Deploy files to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "backend/*,frontend/dist/*"
        target: "/var/www/inner-sydney-voice"
        rm: false

    # Setup and restart services
    - name: Setup backend and restart services
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Ensure directory exists and has correct permissions
          sudo mkdir -p /var/www/inner-sydney-voice/backend
          sudo chown -R ubuntu:ubuntu /var/www/inner-sydney-voice

          # Install python3-full if not installed (required for venv)
          sudo apt update
          sudo apt install -y python3-full python3-pip python3-venv

          # Create .env file
          echo "${{ secrets.ENV_FILE }}" > /var/www/inner-sydney-voice/backend/.env
          chmod 600 /var/www/inner-sydney-voice/backend/.env

          # Setup Python virtual environment
          cd /var/www/inner-sydney-voice/backend
          
          # Remove existing venv if corrupted and recreate
          if [ -d "venv" ]; then
            rm -rf venv
          fi
          
          python3 -m venv venv
          source venv/bin/activate
          
          # Check if requirements.txt exists before installing
          if [ -f "requirements.txt" ]; then
            pip install --upgrade pip
            pip install -r requirements.txt
          else
            echo "Warning: requirements.txt not found, skipping pip install"
          fi

          # Reload systemd daemon for any service changes
          sudo systemctl daemon-reload

          # Only restart FastAPI service if main.py exists
          if [ -f "main.py" ]; then
            sudo systemctl restart fastapi
            # Wait a moment for service to start
            sleep 3
            
            # Check if service started successfully
            if sudo systemctl is-active --quiet fastapi; then
              echo "FastAPI service started successfully"
              # Test health endpoint
              sleep 2
              curl -f http://localhost:8000/health || echo "Health check failed, but continuing..."
            else
              echo "FastAPI service failed to start, checking status..."
              sudo systemctl status fastapi --no-pager
            fi
          else
            echo "Warning: main.py not found, skipping FastAPI service start"
          fi

          # Reload nginx (this should always work)
          sudo systemctl reload nginx
          echo "Deployment completed successfully"